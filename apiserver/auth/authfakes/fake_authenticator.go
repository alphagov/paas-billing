// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"sync"

	"github.com/alphagov/paas-billing/apiserver/auth"
	echo "github.com/labstack/echo/v4"
)

type FakeAuthenticator struct {
	AuthorizeStub        func(echo.Context) error
	authorizeMutex       sync.RWMutex
	authorizeArgsForCall []struct {
		arg1 echo.Context
	}
	authorizeReturns struct {
		result1 error
	}
	authorizeReturnsOnCall map[int]struct {
		result1 error
	}
	ExchangeStub        func(echo.Context) error
	exchangeMutex       sync.RWMutex
	exchangeArgsForCall []struct {
		arg1 echo.Context
	}
	exchangeReturns struct {
		result1 error
	}
	exchangeReturnsOnCall map[int]struct {
		result1 error
	}
	NewAuthorizerStub        func(string) (auth.Authorizer, error)
	newAuthorizerMutex       sync.RWMutex
	newAuthorizerArgsForCall []struct {
		arg1 string
	}
	newAuthorizerReturns struct {
		result1 auth.Authorizer
		result2 error
	}
	newAuthorizerReturnsOnCall map[int]struct {
		result1 auth.Authorizer
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthenticator) Authorize(arg1 echo.Context) error {
	fake.authorizeMutex.Lock()
	ret, specificReturn := fake.authorizeReturnsOnCall[len(fake.authorizeArgsForCall)]
	fake.authorizeArgsForCall = append(fake.authorizeArgsForCall, struct {
		arg1 echo.Context
	}{arg1})
	stub := fake.AuthorizeStub
	fakeReturns := fake.authorizeReturns
	fake.recordInvocation("Authorize", []interface{}{arg1})
	fake.authorizeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthenticator) AuthorizeCallCount() int {
	fake.authorizeMutex.RLock()
	defer fake.authorizeMutex.RUnlock()
	return len(fake.authorizeArgsForCall)
}

func (fake *FakeAuthenticator) AuthorizeCalls(stub func(echo.Context) error) {
	fake.authorizeMutex.Lock()
	defer fake.authorizeMutex.Unlock()
	fake.AuthorizeStub = stub
}

func (fake *FakeAuthenticator) AuthorizeArgsForCall(i int) echo.Context {
	fake.authorizeMutex.RLock()
	defer fake.authorizeMutex.RUnlock()
	argsForCall := fake.authorizeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthenticator) AuthorizeReturns(result1 error) {
	fake.authorizeMutex.Lock()
	defer fake.authorizeMutex.Unlock()
	fake.AuthorizeStub = nil
	fake.authorizeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthenticator) AuthorizeReturnsOnCall(i int, result1 error) {
	fake.authorizeMutex.Lock()
	defer fake.authorizeMutex.Unlock()
	fake.AuthorizeStub = nil
	if fake.authorizeReturnsOnCall == nil {
		fake.authorizeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.authorizeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthenticator) Exchange(arg1 echo.Context) error {
	fake.exchangeMutex.Lock()
	ret, specificReturn := fake.exchangeReturnsOnCall[len(fake.exchangeArgsForCall)]
	fake.exchangeArgsForCall = append(fake.exchangeArgsForCall, struct {
		arg1 echo.Context
	}{arg1})
	stub := fake.ExchangeStub
	fakeReturns := fake.exchangeReturns
	fake.recordInvocation("Exchange", []interface{}{arg1})
	fake.exchangeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthenticator) ExchangeCallCount() int {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	return len(fake.exchangeArgsForCall)
}

func (fake *FakeAuthenticator) ExchangeCalls(stub func(echo.Context) error) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = stub
}

func (fake *FakeAuthenticator) ExchangeArgsForCall(i int) echo.Context {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	argsForCall := fake.exchangeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthenticator) ExchangeReturns(result1 error) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = nil
	fake.exchangeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthenticator) ExchangeReturnsOnCall(i int, result1 error) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = nil
	if fake.exchangeReturnsOnCall == nil {
		fake.exchangeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.exchangeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthenticator) NewAuthorizer(arg1 string) (auth.Authorizer, error) {
	fake.newAuthorizerMutex.Lock()
	ret, specificReturn := fake.newAuthorizerReturnsOnCall[len(fake.newAuthorizerArgsForCall)]
	fake.newAuthorizerArgsForCall = append(fake.newAuthorizerArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.NewAuthorizerStub
	fakeReturns := fake.newAuthorizerReturns
	fake.recordInvocation("NewAuthorizer", []interface{}{arg1})
	fake.newAuthorizerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthenticator) NewAuthorizerCallCount() int {
	fake.newAuthorizerMutex.RLock()
	defer fake.newAuthorizerMutex.RUnlock()
	return len(fake.newAuthorizerArgsForCall)
}

func (fake *FakeAuthenticator) NewAuthorizerCalls(stub func(string) (auth.Authorizer, error)) {
	fake.newAuthorizerMutex.Lock()
	defer fake.newAuthorizerMutex.Unlock()
	fake.NewAuthorizerStub = stub
}

func (fake *FakeAuthenticator) NewAuthorizerArgsForCall(i int) string {
	fake.newAuthorizerMutex.RLock()
	defer fake.newAuthorizerMutex.RUnlock()
	argsForCall := fake.newAuthorizerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthenticator) NewAuthorizerReturns(result1 auth.Authorizer, result2 error) {
	fake.newAuthorizerMutex.Lock()
	defer fake.newAuthorizerMutex.Unlock()
	fake.NewAuthorizerStub = nil
	fake.newAuthorizerReturns = struct {
		result1 auth.Authorizer
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticator) NewAuthorizerReturnsOnCall(i int, result1 auth.Authorizer, result2 error) {
	fake.newAuthorizerMutex.Lock()
	defer fake.newAuthorizerMutex.Unlock()
	fake.NewAuthorizerStub = nil
	if fake.newAuthorizerReturnsOnCall == nil {
		fake.newAuthorizerReturnsOnCall = make(map[int]struct {
			result1 auth.Authorizer
			result2 error
		})
	}
	fake.newAuthorizerReturnsOnCall[i] = struct {
		result1 auth.Authorizer
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authorizeMutex.RLock()
	defer fake.authorizeMutex.RUnlock()
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	fake.newAuthorizerMutex.RLock()
	defer fake.newAuthorizerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthenticator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Authenticator = new(FakeAuthenticator)
