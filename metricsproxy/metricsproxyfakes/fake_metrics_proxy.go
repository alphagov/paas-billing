// Code generated by counterfeiter. DO NOT EDIT.
package metricsproxyfakes

import (
	"net/http"
	"net/url"
	"sync"

	"github.com/alphagov/paas-billing/metricsproxy"
)

type FakeMetricsProxy struct {
	ForwardRequestToURLStub        func(http.ResponseWriter, *http.Request, *url.URL, map[string]string)
	forwardRequestToURLMutex       sync.RWMutex
	forwardRequestToURLArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
		arg3 *url.URL
		arg4 map[string]string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsProxy) ForwardRequestToURL(arg1 http.ResponseWriter, arg2 *http.Request, arg3 *url.URL, arg4 map[string]string) {
	fake.forwardRequestToURLMutex.Lock()
	fake.forwardRequestToURLArgsForCall = append(fake.forwardRequestToURLArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
		arg3 *url.URL
		arg4 map[string]string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ForwardRequestToURLStub
	fake.recordInvocation("ForwardRequestToURL", []interface{}{arg1, arg2, arg3, arg4})
	fake.forwardRequestToURLMutex.Unlock()
	if stub != nil {
		fake.ForwardRequestToURLStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeMetricsProxy) ForwardRequestToURLCallCount() int {
	fake.forwardRequestToURLMutex.RLock()
	defer fake.forwardRequestToURLMutex.RUnlock()
	return len(fake.forwardRequestToURLArgsForCall)
}

func (fake *FakeMetricsProxy) ForwardRequestToURLCalls(stub func(http.ResponseWriter, *http.Request, *url.URL, map[string]string)) {
	fake.forwardRequestToURLMutex.Lock()
	defer fake.forwardRequestToURLMutex.Unlock()
	fake.ForwardRequestToURLStub = stub
}

func (fake *FakeMetricsProxy) ForwardRequestToURLArgsForCall(i int) (http.ResponseWriter, *http.Request, *url.URL, map[string]string) {
	fake.forwardRequestToURLMutex.RLock()
	defer fake.forwardRequestToURLMutex.RUnlock()
	argsForCall := fake.forwardRequestToURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeMetricsProxy) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.forwardRequestToURLMutex.RLock()
	defer fake.forwardRequestToURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricsProxy) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metricsproxy.MetricsProxy = new(FakeMetricsProxy)
